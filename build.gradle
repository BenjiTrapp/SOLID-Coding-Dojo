import groovy.swing.SwingBuilder

plugins {
    id 'java'
    id 'maven'
    id 'groovy'
    id 'idea'
    id 'org.ajoberstar.grgit' version '2.2.0-rc.1'
}

group = 'de.benjitrapp.solid-coding-dojo'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven { url 'http://repo.maven.apache.org/maven2' }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file('out/production/' + module.name)
        testOutputDir = file('out/test/' + module.name)
    }
}

sourceSets {
    main { java { srcDir 'src/' }}
    test { java { srcDir 'tests/' }}
}


task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

def choice = '' ?: 'master'

task startLesson(type: Task) {
    group = 'SOLID lessons'
    description = 'Choose your destiny among all available SOLID lessons'

    doLast {
        def console = System.console()

        if (console == null) {
            new SwingBuilder().edt {
                dialog( modal: true,
                        title: '> SOLID CODING DOJO - Choose your destiny',
                        alwaysOnTop: true,
                        resizable: false,
                        locationRelativeTo: null,
                        pack: true,
                        show: true
                ) {
                    vbox {
                        label(text: '<html>Welcome to the SOLID Coding Dojo!<br>' +
                                    '======================================<br>' +
                                    'Available lessons<br>' +
                                    '<br>' +
                                    'S: Single responsibility principle<br>' +
                                    'O: Open/Close principle<br>' +
                                    'L: Liskov substitution principle<br>' +
                                    'I: Interface segregation principle<br>' +
                                    'D: Dependency inversion principle<br><br>' +
                                    'Enter the Capital latter of the wanted session<br>' +
                                    'to start learning:<br>' +
                                '</html>')
                        input = textField()
                        button(defaultButton: true, text: 'Start Lesson', actionPerformed: {
                            choice = input.text.toLowerCase() as String
                            dispose()
                        })
                    }
                }
            }
        } else {
            println '''
                    Welcome to the SOLID Coding Dojo!
                    ======================================
                    Available lessons
                    
                    S: Single responsibility principle
                    O: Open/Close principle
                    L: Liskov substitution principle
                    I: Interface segregation principle
                    D: Dependency inversion principle
                    '''
            choice = console.readLine('> Choose your destiny! : ').toLowerCase()
        }

        assert choice.matches('^[solid]\$'), 'Only the chars S,O,L,I,D are allowed!'
        assert grgit.branch.current().getName() != choice, 'Nothing to do - target and current branch are equal'

        grgit.checkout {
            branch = choice
            createBranch = false
        }
    }
}

task getSolution(type: Task) {
    group = 'SOLID lessons'
    description = 'Retrieves the solution for your current Lesson'

    doLast {
            def currentBranch = grgit.branch.current().getName()

            assert !currentBranch.contains('-solution'), 'ERROR (DAU) You\'re already in a solution branch'
            assert currentBranch.matches('^[solid]\$'), "ERROR (DAU): $currentBranch is an unknon branch"

            grgit.checkout {
                branch = "${currentBranch}-solution"
            }
    }
}

dependencies {
    compile (
            'org.slf4j:slf4j-api:1.7.25',
            'org.slf4j:slf4j-log4j12:1.7.25',
            'log4j:log4j:1.2.17',
            'org.codehaus.groovy:groovy-all:2.4.10'
    )

    testCompile('com.athaydes:spock-reports:1.3.1') {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }


    testCompile(
            'junit:junit:4.12',
            'org.spockframework:spock-core:1.1-groovy-2.4',
            'org.hamcrest:hamcrest-all:1.3'
    )

    testRuntime(
            'net.bytebuddy:byte-buddy:1.6.5',
            'org.objenesis:objenesis:2.5.1'
    )
}
